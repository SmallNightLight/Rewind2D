#pragma once

#include "ActionManager.h"

#include <SDL3/SDL_events.h>
#include <array>

static constexpr size_t MaxActionCount = 32;

class Action
{
public:
    explicit Action(FrameNumber frame = 0) : Frame(frame), m_ActionMapper(nullptr) { }

    void Initialize(ActionManager* actionManager)
    {
        m_ActionMapper = actionManager;
    }

    void Callback(SDL_Event* event)
    {
        if (!m_ActionMapper) return;

        //Filter out input events which are generated by holding down keys
        if (event->key.repeat || event->key.scancode >= SDL_SCANCODE_COUNT) return;

        ActionKey actionKey;
        if (m_ActionMapper->TryGetActionKey(event->key.scancode, actionKey))
        {
            m_CurrentInput[actionKey] = event->key.down;
        }
    }

    void Update()
    {
        m_LastInput = m_CurrentInput;
    }

    [[nodiscard]] bool GetKey(ActionKey actionKey) const
    {
        return m_CurrentInput[actionKey];
    }

    [[nodiscard]] bool GetKeyDown(ActionKey actionKey) const
    {
        return m_CurrentInput[actionKey] && !m_LastInput[actionKey];
    }

    [[nodiscard]] bool GetKeyUp(ActionKey actionKey) const
    {
        return !m_CurrentInput[actionKey] && m_LastInput[actionKey];
    }

    void Serialize(Stream& stream) const
    {
        stream.WriteBitset<MaxActionCount>(m_CurrentInput);
        stream.WriteBitset<MaxActionCount>(m_LastInput);
    }

    void Deserialize(Stream&& stream)
    {
        m_CurrentInput = stream.ReadBitset<MaxActionCount>();
        m_LastInput = stream.ReadBitset<MaxActionCount>();
    }

public:
    FrameNumber Frame;

private:
    std::bitset<MaxActionCount> m_CurrentInput { };
    std::bitset<MaxActionCount> m_LastInput { };

    ActionManager* m_ActionMapper;
};