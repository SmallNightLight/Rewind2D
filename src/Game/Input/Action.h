#pragma once

#include "ActionManager.h"

#include <SDL3/SDL_events.h>
#include <array>

static constexpr size_t MaxInputCount = 256;

class Action
{
public:
    Action() : m_ActionMapper(nullptr) { }

    void Initialize(ActionManager* actionManager)
    {
        m_ActionMapper = actionManager;
    }

    void Callback(SDL_Event* event)
    {
        //Filter out input events which are generated by holding down keys
        if (event->key.repeat || event->key.scancode >= SDL_SCANCODE_COUNT) return;

        ActionKey actionKey;
        if (m_ActionMapper->TryGetActionKey(event->key.scancode, actionKey))
        {
            m_CurrentInput[actionKey] = event->key.down;
        }
    }

    void Update()
    {
        m_LastInput = m_CurrentInput;
    }

    bool GetKey(ActionKey actionKey) const
    {
        return m_CurrentInput[actionKey];
    }

    bool GetKeyDown(ActionKey actionKey) const
    {
        return m_CurrentInput[actionKey] && !m_LastInput[actionKey];
    }

    bool GetKeyUp(ActionKey actionKey) const
    {
        return !m_CurrentInput[actionKey] && m_LastInput[actionKey];
    }

private:
    std::array<bool, MaxInputCount> m_CurrentInput { };
    std::array<bool, MaxInputCount> m_LastInput { };

    ActionManager* m_ActionMapper;
};